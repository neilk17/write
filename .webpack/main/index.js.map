{"version":3,"file":"index.js","mappings":";;;;;;;;;;AAAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;UCAA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;;;;;ACtBA,iBAAiB,mBAAO,CAAC,0BAAU;AACnC,QAAQ,sCAAsC;AAC9C,aAAa,mBAAO,CAAC,kBAAM;;AAE3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,gFAAiC;AAChD;AACA,GAAG;;AAEH,iBAAiB,8CAAyB;;;AAG1C;;;AAGA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;;AAEA,eAAe,mBAAO,CAAC,cAAI;AAC3B,iBAAiB,mBAAO,CAAC,kBAAM;AAC/B;;AAEA;AACA,4CAA4C,iBAAiB;AAC7D;AACA,MAAM;AACN,qDAAqD,cAAc;AACnE;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA,uE","sources":["webpack://write/external node-commonjs \"electron\"","webpack://write/external node-commonjs \"fs\"","webpack://write/external node-commonjs \"path\"","webpack://write/webpack/bootstrap","webpack://write/./src/main.js"],"sourcesContent":["module.exports = require(\"electron\");","module.exports = require(\"fs\");","module.exports = require(\"path\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","const electron = require('electron')\nconst { app, BrowserWindow, dialog, ipcMain } = electron\nconst path = require('path')\n\nfunction createWindow() {\n  // Create the browser window.\n  const window = new BrowserWindow({\n    width: 800,\n    height: 600,\n    titleBarStyle: 'hidden',\n    webPreferences: {\n      nodeIntegration: false,\n      contextIsolation: true,\n      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY\n    }\n  })\n\n  window.loadURL(MAIN_WINDOW_WEBPACK_ENTRY)\n\n\n}\n\n\n// Handle directory selection and creation\nif (electron.ipcMain) {\n  electron.ipcMain.handle('select-directory', async () => {\n    const result = await dialog.showOpenDialog({\n      properties: ['openDirectory', 'createDirectory']\n    })\n    if (!result.canceled && result.filePaths.length > 0) {\n      return result.filePaths[0]\n    }\n    return null\n  })\n\n  electron.ipcMain.handle('create-directory', async (event, basePath, folderName) => {\n    if (!basePath || !folderName) {\n      throw new Error('Both path and folder name are required')\n    }\n\n    const fs = require('fs')\n    const path = require('path')\n    const targetPath = path.join(basePath, folderName)\n\n    try {\n      await fs.promises.mkdir(targetPath, { recursive: true })\n      return targetPath\n    } catch (error) {\n      throw new Error(`Failed to create directory: ${error.message}`)\n    }\n  })\n}\n\n// This method will be called when Electron has finished\n// initialization and is ready to create browser windows.\n// Some APIs can only be used after this event occurs.\napp.whenReady().then(() => {\n  createWindow()\n\n  app.on('activate', function () {\n    // On macOS it's common to re-create a window in the app when the\n    // dock icon is clicked and there are no other windows open.\n    if (BrowserWindow.getAllWindows().length === 0) createWindow()\n  })\n})\n\n// Quit when all windows are closed, except on macOS. There, it's common\n// for applications and their menu bar to stay active until the user quits\n// explicitly with Cmd + Q.\napp.on('window-all-closed', function () {\n  if (process.platform !== 'darwin') app.quit()\n})\n\n// In this file you can include the rest of your app's specific main process\n// code. You can also put them in separate files and require them here."],"names":[],"sourceRoot":""}