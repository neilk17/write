import { app, BrowserWindow, ipcMain, dialog } from 'electron';
import * as path from 'path';
import * as fs from 'fs';
import { getConfig, updateConfig } from './lib/config';

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

const createWindow = (): void => {
  const mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    titleBarStyle: 'hidden',
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
      contextIsolation: true,
      nodeIntegration: false,
    },
  });

  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  mainWindow.webContents.openDevTools();
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', () => {
  // Set up IPC handlers
  ipcMain.handle('get-config', async () => {
    return getConfig();
  });

  ipcMain.handle('update-config', async (_, updates) => {
    try {
      updateConfig(updates);
      return true;
    } catch (error) {
      console.error('Error updating config:', error);
      return false;
    }
  });

  ipcMain.handle('select-directory', async () => {
    const { canceled, filePaths } = await dialog.showOpenDialog({
      properties: ['openDirectory'],
    });

    if (canceled || !filePaths.length) {
      return null;
    }

    const selectedPath = filePaths[0];

    // Save the selected path as default
    updateConfig({ defaultPath: selectedPath });

    return selectedPath;
  });

  ipcMain.handle('create-directory', async (_, dirPath, dirName) => {
    try {
      const newDirPath = path.join(dirPath, dirName);
      if (!fs.existsSync(newDirPath)) {
        fs.mkdirSync(newDirPath, { recursive: true });
      }
      return true;
    } catch (error) {
      console.error('Error creating directory:', error);
      return false;
    }
  });

  ipcMain.handle('save-file', async (_, folder, filename, content) => {
    try {
      const filePath = path.join(folder, filename);
      fs.writeFileSync(filePath, content, 'utf-8');
      return true;
    } catch (error) {
      console.error('Error saving file:', error);
      return false;
    }
  });

  ipcMain.handle('read-file', async (_, folder, filename) => {
    try {
      const filePath = path.join(folder, filename);
      if (fs.existsSync(filePath)) {
        return fs.readFileSync(filePath, 'utf-8');
      }
      return '';
    } catch (error) {
      console.error('Error reading file:', error);
      return '';
    }
  });

  ipcMain.handle('list-entries', async (_, folder) => {
    try {
      if (!fs.existsSync(folder)) {
        return [];
      }

      const entries = fs.readdirSync(folder, { withFileTypes: true });
      const files = entries
        .filter(entry => entry.isDirectory() || (entry.isFile() && entry.name.endsWith('.txt')))
        .map(entry => {
          const fullPath = path.join(folder, entry.name);
          const stats = fs.statSync(fullPath);

          // Get both creation and modification times
          const creationTimeStr = stats.birthtime.toISOString();
          const modificationTimeStr = stats.mtime.toISOString();

          return {
            name: entry.name,
            createdAt: creationTimeStr,
            modifiedAt: modificationTimeStr
          };
        });

      return files;
    } catch (error) {
      console.error('Error listing entries:', error);
      return [];
    }
  });

  createWindow();
});

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
